Construct Binary Tree from Inorder and Postorder Traversal

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

=================================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (postorder.empty()) {
            return NULL;
        }
            
        return buildSub(postorder, inorder, postorder.size() - 1, 0, inorder.size() - 1);
    }
    
    TreeNode *buildSub(vector<int> &postorder, vector<int> &inorder, int post_pos, int in_l, int in_r) {
      if (post_pos < 0) {
        return NULL;
      }

      TreeNode* root = new TreeNode(postorder[post_pos]);

      int in_pos;
      for (int i = 0; i < inorder.size(); i++) {
        if (inorder[i] == postorder[post_pos]) {
          in_pos = i;
          break;
        }
      }

      if (in_pos - in_l > 0) {
        root->left = buildSub(postorder, inorder, post_pos - (in_r - in_pos) - 1, in_l, in_pos - 1);
      }

      if (in_r - in_pos > 0) {
        root->right = buildSub(postorder, inorder, post_pos - 1,  in_pos + 1, in_r);                                                                                                                                    
      }
      
      return root;
    }
};


    
