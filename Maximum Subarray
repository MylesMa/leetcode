Maximum Subarray

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

==============================================================

class Solution {
  public:
    int maxSubArray(int A[], int n) {
      if (n == 0) {
        return 0;
      }

      int sum;
      int max_sum = A[0];
      bool neg_flag = false;

      int pre_positive = 0;
      int post_positive = 0;
      int neg = 0;

      for (int i = 0; i < n; i++) {
        max_sum = max(max_sum, A[i]);
        if (A[i] >= 0) {
          if (neg_flag) {
            post_positive += A[i];
            max_sum = max(max_sum, post_positive);

            if (i + 1 == n || A[i + 1] < 0) {                                                                                                                                                                                                
              sum = pre_positive + neg + post_positive;
              if (sum >= post_positive) {
                max_sum = max(max_sum, sum);
                pre_positive = sum;
              } else {
                pre_positive = post_positive;
              }
              neg = 0;
              neg_flag = false;
              post_positive = 0;
            }
          } else {
            pre_positive += A[i];
            max_sum = max(max_sum, pre_positive);
          }
        } else {
          neg_flag = true;
          neg += A[i];
        }

      }

      return max_sum;
    }
};
