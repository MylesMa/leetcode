Search for a Range

Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

=================================================================

class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int l = 0;
        int r = n -1;
        int m;
        
        int left_mid;
        int left_l;
        int left_r;
        
        int right_mid;
        int right_l;
        int right_r;
        
        int left_ret = -1;
        int right_ret = -1;
        vector<int> ret;
        
        while (l <= r) {
            if (A[l] == target) {
                left_ret = l;
            }
            if (A[r] == target) {
                right_ret = r;
            }
            
            if (left_ret != -1 && right_ret != -1) {
                break;
            }
            
            m = l + (r - l) / 2;
            if (A[m] < target) {
                l = m + 1;
            } else if (A[m] > target) {
                r = m - 1; 
            } else if (A[m] == target) {
                left_l = l;
                left_r = m - 1;
                left_mid = left_l + (left_r - left_l) / 2;
                
                left_ret = m;
                right_ret = m;
                
                while (left_r >= left_l) {
                    if (A[left_mid] == target) {
                        left_ret = left_mid;
                        left_r = left_mid - 1;
                    } else { // A[left_mid] < target
                        left_l = left_mid + 1;
                    }
                    left_mid = left_l + (left_r - left_l) / 2;
                }
                
                right_l = m + 1;
                right_r = r;
                right_mid = right_l + (right_r - right_l) / 2;
                while (right_r >= right_l) {
                    if (A[right_mid] == target) {
                        right_ret = right_mid;
                        right_l = right_mid + 1;
                    } else { // A[right_mid] > target
                        right_r = right_mid - 1;
                    }
                    right_mid = right_l + (right_r - right_l) / 2;
                }
                
                
                break;
            }            
        }
        
        ret.push_back(left_ret);
        ret.push_back(right_ret);
        
        return ret;
    }
};
