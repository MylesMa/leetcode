Permutations

Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

===============================================================================


class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ret;

        if (num.empty()) {
            return ret;
        }
        
        ret = find(num, 0);

        return ret;
    }
    
    vector<vector<int> > find(vector<int> &num, int begin) {
        vector<vector<int> > ret;
        vector<vector<int> > sub;
        vector<int> a_ret;
        
        if (begin == num.size() - 1) {
            a_ret.push_back(num[begin]);
            ret.push_back(a_ret);
            
            return ret;
        }
        
        sub = find(num, begin + 1);
        
        for (int i = 0; i < sub.size(); i++) {
            // insert to index
            for (int index = 0; index <= sub[i].size(); index++) {
                int count = 0;
                a_ret.clear();
                if (index == count) {
                    a_ret.push_back(num[begin]);
                    count++;
                }
                int j = 0;
                while (count <= sub[i].size()) {
                    if (index == count) {
                        a_ret.push_back(num[begin]);
                        count++;
                    } else {
                        a_ret.push_back(sub[i][j]);
                        count++;
                        j++;
                    }
                }
                
                ret.push_back(a_ret);
            }
        }
    }
};
