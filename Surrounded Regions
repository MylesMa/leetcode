Surrounded Regions

Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region .

For example,

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

====================================================================================


class Solution {
  public:
    void solve(vector<vector<char> > &board) {
      // Start typing your C/C++ solution below
      // DO NOT write int main() function
      if (board.empty()) {
        return;
      }

      int rows = board.size();
      int cols = board[0].size();
      for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
          if (board[i][j] == 'O' && (i == 0 || j == 0 || i == rows - 1 || j == cols - 1)) {
            stack<pair<int, int> > s;
            s.push(make_pair(i, j));
            board[i][j] = '#';
            flushBoard(&board, s);
          }
        }
      }
      
      for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
          if (board[i][j] == '#') {
            board[i][j] = 'O';
          } else if (board[i][j] == 'O') {                                                                                                                                                                                                   
            board[i][j] = 'X';
          }
        }
      }

    }

    void flushBoard(vector<vector<char> >* board, stack<pair<int, int> > s) {
      int i, j;
      while (!s.empty()) {
        i = s.top().first;
        j = s.top().second;
        s.pop();

        if (i - 1 >= 0 && (*board)[i - 1][j] == 'O') {
          s.push(make_pair(i - 1, j));
          (*board)[i - 1][j] = '#';
        }
        
        if (i + 1 < board->size() && (*board)[i + 1][j] == 'O') {
          s.push(make_pair(i + 1, j));
          (*board)[i + 1][j] = '#';
        }

        if (j - 1 >= 0 && (*board)[i][j - 1] == 'O') {
          s.push(make_pair(i, j - 1));
          (*board)[i][j - 1] = '#';
        }

        if (j + 1 < (*board)[i].size() && (*board)[i][j + 1] == 'O') {
          s.push(make_pair(i, j + 1));
          (*board)[i][j + 1] = '#';
        }
      }
    }
};
