Gray Code

The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.

For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:

00 - 0
01 - 1
11 - 3
10 - 2
Note:
For a given n, a gray code sequence is not uniquely defined.

For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.

For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.

======================================================================================================

class Solution {
public:
    vector<int> grayCode(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> ret;
        int max = (1 << n) - 1;
        
        vector<bool> visited(max + 1, false); 
        visited[0] = true;
        vector<int> result;
        result.push_back(0);
        
        findGrayCode(visited, &result, n);
        
        return result;
    }
    
    bool findGrayCode(vector<bool> visited, vector<int>* result, int n) {
        bool all_visited = true;
    
        for (int i = 1; i < visited.size(); i++) {
            if (!visited[i]) {
                all_visited = false;
                if (isGrayPair(result->back(), i, n)) {
                    result->push_back(i);
                    visited[i] = true;
                    if (findGrayCode(visited, result, n)) {
                        return true;
                    }
                    result->pop_back();
                    visited[i] = false;
                }
            }
        }
        
        if (all_visited) {
            return true;
        }
        
        return false;
    }
    
    bool isGrayPair(int i, int j, int n) {
        int count = 0;
        int pos = 0;
        while (pos < n) {
            if (i % 2 != j % 2) {
                count++;
            }
            
            if (count > 1) {
                return false;
            }
            
            if (i == 0 && j == 0) {
                break;
            }
            
            i = i / 2;
            j = j / 2;
            pos++;
        }
        
        return count == 1;
    }
};
