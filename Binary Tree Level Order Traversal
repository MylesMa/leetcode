Binary Tree Level Order Traversal

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

=================================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ret;
        vector<int> a_ret;
        
        vector<TreeNode*> parent;
        vector<TreeNode*> candi_parent;
        
        if (!root) {
            return ret;
        }
        
        parent.push_back(root);
        
        while (!parent.empty()) {
            a_ret.clear();
            candi_parent.clear();
            for (int i = 0; i < parent.size(); i++) {
                if (!parent[i]) {
                    continue;
                }
                
                a_ret.push_back(parent[i]->val);
                
                if (parent[i]->left) {
                    candi_parent.push_back(parent[i]->left);
                }
                if (parent[i]->right) {
                    candi_parent.push_back(parent[i]->right);
                }
            }
            
            parent.clear();
            for (int i = 0; i < candi_parent.size(); i++) {
                parent.push_back(candi_parent[i]);
            }
            
            ret.push_back(a_ret);
            
        }
        
        return ret;
        
    }
};

