Remove Nth Node From End of List

Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

============================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        if (head == NULL) {
            return head;
        }
        
        ListNode* begin;
        ListNode* end;
        ListNode* pre;
        
        end = head;
        begin = head;
        for (int i = 1; i < n; i++) {
            begin = begin->next;
        }
        
        
        while (begin->next != NULL) {
            end = end->next;
            begin = begin->next;
            if (end == head->next) {
                pre = head;
            } else {
                pre = pre->next;
            }
        }
        
        if (end == head) {
            return head->next;
        }
        
        pre->next = end->next;
        end->next = NULL;
        
        return head;
    }
};
