Substring with Concatenation of All Words

You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.

For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).

====================================

class Solution {
  public:
    vector<int> findSubstring(string S, vector<string> &L) {
      // Start typing your C/C++ solution below  
      // DO NOT write int main() function  
      vector<int> result;
      if (L.empty()) {
        return result;
      }
      map<string, int> L_count_map;

      map<string, int> actual_count_map;
      int word_num = L.size();
      for (int i = 0; i < word_num; ++i) {
        ++L_count_map[L[i]];  
      }

      int word_length = L[0].size();  
      int S_length = S.size();  
      string sub;
      int cur_word_count;
      for (int i = 0; i <= S_length - word_length*word_num; ++i)  
      {  
        actual_count_map.clear();  
        cur_word_count = 0;  
        for (; cur_word_count < word_num; ++cur_word_count) {  
          sub = S.substr(i + cur_word_count * word_length, word_length);                                                                                                                                                                     
          if(L_count_map.find(sub) == L_count_map.end()) {
            break;    
          }

          ++actual_count_map[sub];    
          if(actual_count_map[sub] > L_count_map[sub]) {
            break;    
          }
        }  
        if (cur_word_count == word_num) {
          result.push_back(i);
        }   
      }

      return result;
    }
};

