3Sum


Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0?
Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ? b ? c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
============================================================================

class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sort(num.begin(), num.end());
        
        vector<vector<int> > ret;
        vector<int> single_ret;
        int sum = 0;
        int begin;
        int end;
        for (int i = 0; i < num.size(); i++) {
            if (i - 1 >= 0 && num[i] == num[i - 1]) {
                continue;
            }
            
            sum = 0 - num[i];
            begin = i + 1;
            end = num.size() - 1;
            
            while (begin < num.size() && end > i && begin < end) {
                if (num[begin] + num[end] < sum ||
                    (begin - 1 != i && num[begin - 1] == num[begin])) {
                    begin++;
                } else if (num[begin] + num[end] > sum ||
                           (end + 1 < num.size() && num[end] == num[end + 1])) {
                    end--;
                } else {
                    single_ret.clear();
                    single_ret.push_back(num[i]);
                    single_ret.push_back(num[begin]);
                    single_ret.push_back(num[end]);
                    ret.push_back(single_ret);
                    begin++;
                    end--;
                }
            }
        }
        
        return ret;
    }
};
