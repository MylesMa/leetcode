Sudoku Solver

Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.

[pic]

A sudoku puzzle...

[pic]

...and its solution numbers marked in red.

=============================================================

class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        solve(&board, 0, 0);
    }
    
    bool solve(vector<vector<char> >* board, int i, int j) {
        if (i == 9) {
            return true;
        }
        
        if (j == 9) {
            return solve(board, i + 1, 0);
        }
        
        if ((*board)[i][j] != '.') {
            return solve(board, i, j + 1);
        }
                
        do {
            if ((*board)[i][j] == '9') {
                (*board)[i][j] = '.';
                return false;
            }
            if ((*board)[i][j] == '.') {
                (*board)[i][j] = '1';    
            } else {
                (*board)[i][j]++;
            }
        } while (!isValidSoku(*board, i, j) || !solve(board, i, j + 1));
        
        return true;
    }
    

    
    bool isValidSoku(vector<vector<char> > &board, int row, int col) {
        for (int i = 0; i < 9; i++) {
            if (i != col && board[row][i] == board[row][col]) {
                return false;
            }
            
            if (i != row && board[i][col] == board[row][col]) {
                return false;
            }
        }
        
        int center_row = row / 3 * 3 + 1;
        int center_col = col / 3 * 3 + 1;
        if (!isValidGrid(board, center_row, center_col)) {
            return false;
        }
        
        
        return true;
    }
    
    bool isValidGrid(vector<vector<char> > &board, int i, int j) {
        vector<char> value;
        value.push_back(board[i][j]);
        value.push_back(board[i][j - 1]);
        value.push_back(board[i][j + 1]);
        value.push_back(board[i - 1][j]);
        value.push_back(board[i - 1][j - 1]);
        value.push_back(board[i - 1][j + 1]);
        value.push_back(board[i + 1][j]);
        value.push_back(board[i + 1][j - 1]);
        value.push_back(board[i + 1][j + 1]);
        
        set<char> c_set;
        for (int k = 0; k < value.size(); k++) {
            if (value[k] != '.') {
                if (c_set.find(value[k]) != c_set.end()) {
                    return false;
                } else {
                    c_set.insert(value[k]);
                }
            }
        }
        return true;
    }
};
