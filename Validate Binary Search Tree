Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

======================================================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (!root) {
            return true;
        }
        
        vector<int> ret;
        inorder(root, &ret);
        
        for (int i = 0; i + 1 < ret.size(); i++) {
            if (ret[i] >= ret[i + 1]) {
                return false;
            }
        }
        
        return true;
    }
    
    void inorder(TreeNode *root, vector<int>* ret) {
        if (!root) {
            return;
        }
        
        if (root->left) {
            inorder(root->left, ret);
        }
        
        ret->push_back(root->val);
        
        if (root->right) {
            inorder(root->right, ret);
        }
    }
};
