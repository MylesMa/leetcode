Regular Expression Matching

Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ? false
isMatch("aa","aa") ? true
isMatch("aaa","aa") ? false
isMatch("aa", "a*") ? true
isMatch("aa", ".*") ? true
isMatch("ab", ".*") ? true
isMatch("aab", "c*a*b") ? true

===================================================

class Solution {
public:
    bool isMatch(const char *s, const char *p) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function            
        string a(s);
        string b(p);
        
        if (!isContainChar(a, b)) {
            return false;
        }
        
        return isMatchComb(a, b);
    }
    
    bool isMatchComb(string s, string p) {
        if (s == p) {
            return true;
        }
        
        if (p.empty()) {
            return false;
        }
        
        if (s.empty()) {            
            if (p.length() == 2 && p[1] == '*') {
                return true;
            }
        }
        
        bool ret = false;
        int p_ptr = 0;
        int s_ptr = -1;
        string s_left;
        string s_right;
        string p_left;
        string p_right;
        
        while(s_ptr < static_cast<int>(s.length())) {
            if (s_ptr == -1) {
                s_left = "";
            } else {
                s_left = s.substr(0, s_ptr + 1);
            }
            
            s_right = s.substr(s_ptr + 1);

            if (p_ptr + 1 < p.length() && p[p_ptr + 1] == '*') {
                p_ptr++;
            }
            p_left = p.substr(0, p_ptr + 1);
            p_right = p.substr(p_ptr + 1);
            ret = isEqual(s_left, p_left) && isMatchComb(s_right, p_right);
            if (ret) {
                return true;
            }
            
            s_ptr++;
        }
        
        return false;
    }    
    
    bool isEqual(string s, string p) {
        if (p.length() == 1) {
            if (s.length() != 1) {
                return false;
            }
                
            if (p[0] == '.' || s[0] == p[0]) {
                return true;
            } else {
                return false;
            }
        } else {
            if (p[1] == '*') {
                if (s.empty() || p[0] == '.') {
                    return true;
                } 
            
                for (int i = 0; i < s.length(); i++) {
                    if (s[i] != p[0]) {
                        return false;
                    }
                }
                return true;
            } else {
                // will not run to here
                return false;
            }
        }
        
        // will not run to here
        return false;
    }
    
    bool isContainChar(string s, string p) {
        for (int i = 0; i < s.length(); i++) {
            bool ret = false;
            for (int j = 0; j < p.length(); j++) {
                if (s[i] == p[j] || p[j] == '.') {
                    ret = true;
                    break;
                }
            }
            if  (!ret) {
                return false;
            }
        }
        
        return true;
    }
};
