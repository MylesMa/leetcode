Recover Binary Search Tree

Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

==========================================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> value;
        vector<TreeNode*> tree;
        traversal(root, value, tree);
        
        sort(value.begin(), value.end());
        
        for (int i = 0; i < value.size(); i++) {
            tree[i]->val = value[i];
        }
    }
    
    void traversal(TreeNode* root, vector<int>& value, vector<TreeNode*>& tree) {
        if (!root) {
            return;
        }
        
        if (root->left) {
            traversal(root->left, value, tree);
        }
        
        value.push_back(root->val);
        tree.push_back(root);
        
        if (root->right) {
            traversal(root->right, value, tree);
        }
    }
};
