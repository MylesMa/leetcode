Unique Binary Search Trees

Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

==========================================================================

class Solution {
public:
    int numTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (n <= 1) {
            return 1;
        }
        
        map<int, int> num_tree;
        num_tree.insert(make_pair(0, 1));
        num_tree.insert(make_pair(1, 1));
        
        int count = 0;
        int left;
        int right;
        for (int i = 2; i <= n; i++) {
            count = 0;
            for (int j = 1; j <= i; j++) {
                left = j - 1;
                right = i - j;
                count += num_tree[left] * num_tree[right];
            }
            num_tree.insert(make_pair(i, count));
        }
        
        return num_tree[n];
    }
};
