Best Time to Buy and Sell Stock III

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

===========================================================================

class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (prices.empty()) {
            return 0;
        }
        
        return findMax(prices, 0);
    }
    
    int findMax(vector<int> &prices, int begin) {
        if (begin >= prices.size()) {
            return 0;
        }
         
        int min = prices[begin];
        int max = prices[begin];
        int i = begin;
        int max_profit = 0;
        int profit = 0;
        int remain_profit = 0;
        while (1) {
            while(prices[i] <= min && i < prices.size()) {
                min = prices[i];
                i++;
            }
            
            if (i >= prices.size()) {
                break;
            }
            
            max = prices[i];
            i++;
            while (prices[i] >= max && i < prices.size()) {
                max = prices[i];
                i++;
            }
            
            if (begin == 0) {
                profit = max - min;
                remain_profit = findMax(prices, i);
                if (max - min + remain_profit > max_profit) {
                    max_profit = max - min + remain_profit;
                }
            } else {
                int remain_max = max - min;
                while (i < prices.size()) {
                    if (prices[i] < min) {
                        min = prices[i];
                        continue;
                    }
                    
                    remain_max = std::max(remain_max, prices[i] - min);
                    i++;
                }
                return remain_max;
            }
            
            if (i >= prices.size()) {
                break;
            }
            
            profit = 0;
            remain_profit = 0;
        }
        
        return max_profit;
    }
};
