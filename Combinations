Combinations

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

========================================================================================

class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int count = k;
        vector<vector<int> > ret;
        vector<int> a_ret;
        vector<vector<int> > sub;
        
        if (k == 0 || n == 0) {
            return ret;
        }
        
        if (k == 1) {
            for (int i = 1; i <= n; i++) {
                a_ret.clear();
                a_ret.push_back(i);
                ret.push_back(a_ret);
            }
            return ret;
        }
        
        sub = combine(n, k - 1);
        for (int k = 1; k <= n; k++) {
            for (int i = 0; i < sub.size(); i++) {
                a_ret.clear();
                a_ret.push_back(k);
                
                for (int j = 0; j < sub[i].size(); j++) {
                    if (sub[i][j] <= k) {
                        break;
                    }
                    a_ret.push_back(sub[i][j]);
                }
                if (a_ret.size() != count) {
                    continue;
                }
                sort(a_ret.begin(), a_ret.end());
                ret.push_back(a_ret);
            }
        }
        
        return ret;
    }
};

=================================================
class Solution {
  public:    
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > ret;
        vector<vector<int> > result;
        vector<int> a_ret;

        for (int i = 0 ; i < k; i++) {
            if (ret.empty()) {
                for (int j = 1; j <= n; j++) {
                    a_ret.clear();
                    a_ret.push_back(j);
                    ret.push_back(a_ret);
                }   
                continue;
            }   

            result.clear();
            int size = ret.size();
            for (int t = 0; t < size; t++) {
                for (int j = 1; j <= n; j++) {
                    a_ret.clear();
                    a_ret = ret[t];
                    if (j > a_ret.back()) {
                        a_ret.push_back(j);
                        result.push_back(a_ret);
                    }   
                }   
            }   
            ret = result;
        }   


        return ret;
    }   
};
