Remove Duplicates from Sorted List II

Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

====================================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (!head) {
            return head;
        }
        
        ListNode* ptr = head;
        ListNode* np = ptr->next;
        ListNode* pre;
        ListNode* ppre = NULL;
        ListNode* tmp;
        while (ptr && ptr->next) {
            np = ptr->next;
            if (ptr->val == np->val) {
                    tmp = findNext(ptr);
                if (ppre) {
                    ppre->next = tmp;
                    ptr = tmp;
                } else {
                    head = tmp;
                    ptr = tmp;
                }
                ptr = tmp;
            } else {
                ppre = ptr;
                ptr = ptr->next;    
            }
        }
        
        return head;
    }
    
    ListNode* findNext(ListNode* head) {
        ListNode* np = head->next;
        while (np && np->val == head->val) {
            np = np->next;
        }
        
        return np;
    }
};
