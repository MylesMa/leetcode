4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ? b ? c ? d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

====================================================================================

class Solution {
public:
    vector<vector<int> > fourSum(vector<int> &num, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        int begin;
        int end;
        int sum;
        vector<vector<int> > ret;
        vector<int> single_ret;
        
        sort(num.begin(), num.end());
        
        for (int i = 0; i < num.size(); i++) {
            if (i - 1 >= 0 && num[i - 1] == num[i]) {
                continue;
            }
            for (int j = i + 1; j < num.size(); j++) {
                if (j - 1 > i && num[j - 1] == num[j]) {
                    continue;
                }
                begin = j + 1;
                end = num.size() - 1;
                while (begin < num.size() && end >= j && begin < end) {
                    sum = num[begin] + num[end] + num[i] + num[j];
                    if (sum < target || (begin - 1 > j && num[begin - 1] == num[begin])) {
                        begin++;
                    } else if (sum > target || (end + 1 < num.size() && num[end + 1] == num[end])) {
                        end--;
                    } else if (sum == target) {
                        single_ret.clear();
                        single_ret.push_back(num[i]);
                        single_ret.push_back(num[j]);
                        single_ret.push_back(num[begin]);
                        single_ret.push_back(num[end]);
                        ret.push_back(single_ret);
                        begin++;
                        end--;
                    }
                }
            }
        }
        
        return ret;
    }
};
