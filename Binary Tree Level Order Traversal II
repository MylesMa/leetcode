Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values.
(ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:

[
  [15,7]
  [9,20],
  [3],
]

====================================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ret;
        vector<int> a_ret;
        vector<int> level;
        vector<TreeNode *> node;
        
        if (!root) {
            return ret;
        }
        
        node.push_back(root);
        level.push_back(0);
        
        int pre = 0;
        for (int i = 0; i < node.size(); i++) {
            if (level[i] != pre) {
                ret.insert(ret.begin(), a_ret);
                a_ret.clear();
            }
            a_ret.push_back(node[i]->val);
            
            pre = level[i];
            
            if (node[i]->left) {
                node.push_back(node[i]->left);
                level.push_back(level[i] + 1);
            }
            
            if (node[i]->right) {
                node.push_back(node[i]->right);
                level.push_back(level[i] + 1);
            }
        }
        if (!a_ret.empty()) {
            ret.insert(ret.begin(), a_ret);
        }
        
        return ret;
    }
};
