Edit Distance

Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

=============================================================

class Solution {
  public:
    int minDistance(string word1, string word2) {
      // Start typing your C/C++ solution below
      // DO NOT write int main() function
      if (word1.empty()) {
        return word2.size();
      }

      if (word2.empty()) {
        return word1.size();
      }

      vector<vector<int> > dp(word1.size() + 1,
                                   vector<int>(word2.size() + 1, INT_MAX));

      dp[0][0] = 0;

      for (int i = 1; i <= word1.size(); i++) {
        dp[i][0] = i;
      }

      for (int i = 1; i <= word2.size(); i++) {
        dp[0][i] = i;
      }

      for (int p1 = 1; p1 <= word1.size(); p1++) {
        for (int p2 = 1; p2 <= word2.size(); p2++) {
          if (word1[p1 - 1] == word2[p2 - 1]) {
            dp[p1][p2] = min(dp[p1][p2], dp[p1 - 1][p2 - 1]);
          } else {
            dp[p1][p2] = min(dp[p1][p2], dp[p1 - 1][p2 - 1] + 1);
          }

          dp[p1][p2] = min(dp[p1][p2], dp[p1 - 1][p2] + 1);

          dp[p1][p2] = min(dp[p1][p2], dp[p1][p2 - 1] + 1);
        }
      }

      return dp[word1.size()][word2.size()];
    }
};
