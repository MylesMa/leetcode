Merge Intervals

Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

======================================================================

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
static bool comp(Interval i1, Interval i2) {
    return i1.start < i2.start;
}

class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<Interval> ret;
        
        if (intervals.empty()) {
            return ret;
        }
        
        sort(intervals.begin(), intervals.end(), comp);
        
        
        Interval* pre_interval = NULL;
        for (int i = 0; i < intervals.size(); i++) {
            if (!pre_interval) {
                pre_interval = &intervals[i];
            } else {
                if (pre_interval->end >= intervals[i].start) {
                    Interval* itv = new Interval(min(pre_interval->start, intervals[i].start),
                                                 max(pre_interval->end, intervals[i].end));
                    pre_interval = itv;
                } else {
                    ret.push_back(*pre_interval);
                    
                    pre_interval = &intervals[i];
                }
            }
        }
        
        if (pre_interval) {
            ret.push_back(*pre_interval);
        }
        
        return ret;
    }
};
