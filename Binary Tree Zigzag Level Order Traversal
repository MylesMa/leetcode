Binary Tree Zigzag Level Order Traversal

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]

========================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ret;
        vector<int> a_ret;
        
        if (!root) {
            return ret;
        }
        
        vector<TreeNode*> node_list;
        vector<int> level_list;
        node_list.push_back(root);
        level_list.push_back(0);
        bool flag = false;
        for (int i = 0; i < node_list.size(); i++) {
            if (node_list[i]->left) {
                node_list.push_back(node_list[i]->left);
                level_list.push_back(level_list[i] + 1);
            }
            
            if (node_list[i]->right) {
                node_list.push_back(node_list[i]->right);
                level_list.push_back(level_list[i] + 1);
            }
        }
        
        int pre = -1;
        for (int i = 0; i < node_list.size(); i++) {
            if (i == 0) {
                a_ret.push_back(node_list[i]->val);
                ret.push_back(a_ret);
                flag = !flag;
                pre = 0;
                continue;
            }
            
            if (i == node_list.size() || level_list[i + 1] != level_list[i]) {
                a_ret.clear();
                if (flag) {
                    for (int j = i; j > pre; j--) {
                        a_ret.push_back(node_list[j]->val);
                    }
                } else {
                    for(int j = pre + 1; j <= i; j++) {
                        a_ret.push_back(node_list[j]->val);
                    }
                }
                ret.push_back(a_ret);
                flag = !flag;
                pre = i;
            }
        }
        
        return ret;
    }
};
