Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

=============================================================

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
  public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {

      if (preorder.empty()) {
        return NULL;
      }

      return buildSub(preorder, inorder, 0, 0, inorder.size() - 1);
    }

    TreeNode *buildSub(vector<int> &preorder, vector<int> &inorder, int pre_pos, int in_l, int in_r) {
      if (pre_pos >= preorder.size()) {
        return NULL;
      }

      TreeNode* root = new TreeNode(preorder[pre_pos]);

      int post_pos;
      for (int i = 0; i < inorder.size(); i++) {
        if (inorder[i] == preorder[pre_pos]) {
          post_pos = i;
          break;
        }
      }

      if (post_pos - in_l > 0) {
        root->left = buildSub(preorder, inorder, pre_pos + 1, in_l, post_pos - 1);
      }

      if (in_r - post_pos > 0) {
        root->right = buildSub(preorder, inorder, pre_pos + post_pos - in_l + 1, post_pos + 1, in_r);                                                                                                                                    
      }
      
      return root;
    }
};
