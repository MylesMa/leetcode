Distinct Subsequences

Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.

=========================================================================

class Solution {
public:
    
    int numDistinct(string S, string T) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > dp(S.length() + 1, vector<int>(T.length() + 1, 0));
        dp[S.length()][T.length()] = 1;
        
        for (int j = T.length(); j >=0; j--) {
            for (int i = S.length(); i >= 0; i--) {
                if (i == S.length() && j == T.length()) {
                    continue;
                }
                
                if (S.length() - i < T.length() - j) {
                    dp[i][j] = 0;
                    continue;
                }
                
                if (S[i] == T[j]) {
                    dp[i][j] += dp[i + 1][j + 1];    
                }
                
                dp[i][j] += dp[i + 1][j];
            }
        }
        
        return dp[0][0];
    }
};
