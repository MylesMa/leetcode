Word Ladder

Given two words (start and end), and a dictionary, 
find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

========================================================================

class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        vector<string> new_dict;
        map<string, int> visited;
        unordered_set<string>::iterator dict_it;
        
        new_dict.push_back(start);
        visited.insert(make_pair(start, 1));
        string t;
        for (int i = 0; i < new_dict.size(); ++i) {
            for(int j = 0; j < new_dict[i].length(); j++) {
                t = new_dict[i];
                for (int k = 0; k < 26; ++k) {
                    if (t == end) {
                        return visited[new_dict[i]] + 1;
                    }
                    
                    t[j] = 'a' + k;
                    if (dict.find(t) != dict.end() &&
                        visited.find(t) == visited.end()) {
                        dict.erase(t);
                        visited.insert(make_pair(t, visited[new_dict[i]] + 1));
                        new_dict.push_back(t);
                    }
                }
            }
        }
        
        return 0;
    }
};
