Swap Nodes in Pairs

Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space.
You may not modify the values in the list, only nodes itself can be changed.

============================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        ListNode* ret = NULL;
        
        if (head == NULL) {
            return NULL;
        }
        
        if (head->next == NULL) {
            return head;
        }
        
        ListNode* optr = head;
        ListNode* eptr = head->next;
        ListNode* next = eptr->next;
        
        ret = eptr;
        eptr->next = optr;
        optr->next = swapPairs(next);
        
        return ret;
    }
};
