Partition List

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

===================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        if (!head) {
            return head;
        }
        
        ListNode* ptr = head;
        ListNode* pre = NULL;
        while (ptr && ptr->val < x) {
            pre = ptr;
            ptr = ptr->next;
        }
        
        if (!ptr) {
            return head;
        }
        
        ListNode* post;
        ListNode* pp = pre;
        while (ptr) {
            if (ptr->val < x) {
                pp->next = ptr->next;
                post = ptr->next;
                if (pre) {
                    ptr->next = pre->next;
                    pre->next = ptr;
                } else {
                    ptr->next = head;
                    head = ptr;
                }
                pre = ptr;
                ptr = post;
            } else {
                pp = ptr;
                ptr = ptr->next;
            }
        }
        
        return head;
    }
};
