Insert Interval

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].


=============================================================================================================

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        vector<Interval> ret;
        Interval* pre = &newInterval;
        for (int i = 0; i < intervals.size(); i++) {
            if (!pre) {
                ret.push_back(intervals[i]);
                continue;
            }
            
            if (pre->end < intervals[i].start) {
                ret.push_back(*pre);
                ret.push_back(intervals[i]);
                pre = NULL;
            } else if (pre->start > intervals[i].end) {
                ret.push_back(intervals[i]);
            } else {
                pre->start = min(pre->start, intervals[i].start);
                pre->end = max(pre->end, intervals[i].end);
            }
        }
        
        if (pre) {
            ret.push_back(*pre);
        }
        
        return ret;
    }
};








